#!/usr/bin/env python3.6
#
# This file is part of environmentd.
#
# environmentd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# environmentd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with environmentd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for monitoring the low-level hardware daemons.  Hardware
   status and weather conditions are aggregated over a time period, and can
   be queried to determine whether it is safe to observe."""

import argparse
import datetime
import sys
import Pyro4
from warwick.observatory.common import log
from warwick.observatory.common.helpers import pyro_client_matches
from warwick.observatory.environment import CommandStatus, Config

# Include more detailed exceptions
sys.excepthook = Pyro4.util.excepthook


class EnvironmentDaemon:
    """Daemon class for communicating with the lower level hardware daemons"""

    def __init__(self, config):
        self._control_ips = config.control_ips
        self._watchers = config.get_watchers()
        self._log_name = config.log_name

    @Pyro4.expose
    def status(self):
        """Returns the aggregated dashboard status of the monitored daemons."""
        ret = {}
        for watcher in self._watchers:
            ret[watcher.daemon_name] = watcher.status()
        return ret

    @Pyro4.expose
    def clear_history(self):
        """Clear the cached measurements"""
        if not pyro_client_matches(self._control_ips):
            return CommandStatus.InvalidControlIP

        print('{} MESSAGE: clearing cached history'.format(datetime.datetime.utcnow()))
        log.warning(self._log_name, 'Clearing cached environment measurements')
        for watcher in self._watchers:
            watcher.clear_history()
        return CommandStatus.Success


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Environment Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    c = Config(args.config)
    c.daemon.launch(EnvironmentDaemon(c))
