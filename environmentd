#!/usr/bin/env python3
#
# This file is part of environmentd.
#
# environmentd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# environmentd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with environmentd.  If not, see <http://www.gnu.org/licenses/>.

"""Daemon process for monitoring the low-level hardware daemons.  Hardware
   status and weather conditions are aggregated over a time period, and can
   be queried to determine whether it is safe to observe."""

# pylint: disable=too-many-locals

from collections import deque
import datetime
import math
import socket
import threading
import time
import demjson
import Pyro4

# Settings for this daemon
PYRO_HOST = 'localhost'
PYRO_PORT = 9002
PYRO_COMM_TIMEOUT = 5
VAISALA_DAEMON_URI = 'PYRO:vaisala_daemon@localhost:9001'

ROOMALERT_IP = '192.168.0.47'
ROOMALERT_PORT = 80
ROOMALERT_QUERY_TIMEOUT = 5

# TODO: Include UPS status

# Delay (in seconds) that we must wait after weather conditions return to
# nominal values before we consider it safe to open the dome.  This also applies
# to the initial startup, while we wait to build sufficient history.
CONDITION_TIMEOUT_DELAY = datetime.timedelta(minutes=20)

# Safe operating ranges. Dome will be closed if these parameters aren't met
VAISALA_WIND_LIMITS = (0, 30)
VAISALA_TEMPERATURE_LIMITS = (0, 50)
VAISALA_HUMIDITY_LIMITS = (0, 75)
VAISALA_PRESSURE_LIMITS = (600, 1100)

ROOMALERT_EXT_TEMPERATURE_LIMITS = (0, 50)
ROOMALERT_EXT_HUMIDITY_LIMITS = (0, 75)
ROOMALERT_INT_TEMPERATURE_LIMITS = (0, 50)
ROOMALERT_INT_HUMIDITY_LIMITS = (0, 75)

# Maximum gap that we will accept between measurements (due to query failures,
# etc). If this is exceeded, then we will force the dome to close until the
# condition timeout passes.
VAISALA_TIME_GAP_MAX = datetime.timedelta(seconds=30)
ROOMALERT_TIME_GAP_MAX = datetime.timedelta(seconds=30)

# Delay (in seconds) between update iterations.
# Actual query period will be slightly longer than this due to comms delays.
VAISALA_QUERY_DELAY = 10
ROOMALERT_QUERY_DELAY = 10

def query_roomalert_json(hostname, port, timeout):
    """Query json data from the roomalert"""
    # The Room Alert omits the HTTP header when returning JSON.
    # This violates the HTTP spec and prevents us from using the
    # standard query libraries.  We instead speak HTTP ourselves over a socket.
    try:
        sock = socket.create_connection((hostname, port), timeout)
        sock.sendall('GET /getData.htm HTTP/1.0\n\n'.encode('ascii'))

        data = [sock.recv(4096)]
        while data[-1]:
            data.append(sock.recv(4096))

    except Exception as exception:
        raise Exception('Socket error while querying {}: {}'.format(hostname, str(exception)))

    # The first line will either be the JSON we want, or a raw HTTP header
    response = ''.join(b.decode('ascii') for b in data)

    if response[0] != '{':
        raise Exception('Unexpected response from {}: {}'.format(hostname, response))

    # The JSON returned by earlier firmwares omits quotes around the keys
    # This violates the JSON specification, and is not accepted by the
    # built-in JSON parser.  demjson accepts this invalid input.
    return demjson.decode(response)

class AggregateMeasurement:
    """A collection of measurements of a specific type over time."""
    def __init__(self, limits=(-99999999, 99999999)):
        self._min = 99999999
        self._max = -99999999
        self._count = 0
        self._limit_min = limits[0]
        self._limit_max = limits[1]

    def add(self, measurement):
        """Add a measurement to the aggregate"""
        self._min = min(measurement, self._min)
        self._max = max(measurement, self._max)
        self._count = self._count + 1

    def results(self):
        """Returns a tuple of max value, min value, min date, max date, and
           whether all the measurements fall within the specified limits."""
        if self._count == 0:
            return (0, 0, False)

        valid = self._min > self._limit_min and self._max < self._limit_max
        return (self._min, self._max, valid)

class VaisalaWatcher:
    """Tracks the state of the remote Vaisala daemon"""

    def __init__(self):
        # Place a hard limit on the number of stored measurements to simplify
        # cleanup.  Additional filtering is required when iterating the queue.
        queue_len = CONDITION_TIMEOUT_DELAY.seconds * \
            1.1 / VAISALA_QUERY_DELAY
        self._data = deque(maxlen=math.ceil(queue_len))

        runloop = threading.Thread(target=self.__run_thread)
        runloop.daemon = True
        runloop.start()

    def __run_thread(self):
        """Run loop for monitoring the vaisalad daemon"""
        while True:
            now = datetime.datetime.utcnow

            # Query the latest measurement
            # pylint: disable=broad-except
            try:
                # The delay between queries is greater than the comm timeout
                # so there is no point caching the proxy between loops
                vaisala = Pyro4.Proxy(VAISALA_DAEMON_URI)
                data = vaisala.last_measurement()

                if data is not None:
                    # Pryo doesn't deserialize dates, so we manually manage this.
                    data['date'] = datetime.datetime.strptime(data['date'], '%Y-%m-%dT%H:%M:%SZ')
                    if now() - data['date'] > VAISALA_TIME_GAP_MAX:
                        print('{} WARNING: recieved stale data from vaisalad: {}' \
                        .format(now(), data['date']))

                    self._data.append(data)
                else:
                    print('{} WARNING: recieved empty data from vaisalad' \
                        .format(now()))
            except Exception as exception:
                print('{} ERROR: failed to query from vaisalad: {}' \
                      .format(now(), str(exception)))
            # pylint: enable=broad-except

            time.sleep(VAISALA_QUERY_DELAY)

    def status(self, max_first_date, min_last_date):
        """Queries the aggregate status of the vaisala weather station.
           Returns a tuple of observability and data"""
        wind = AggregateMeasurement(VAISALA_WIND_LIMITS)
        vaisala_temp = AggregateMeasurement(VAISALA_TEMPERATURE_LIMITS)
        vaisala_humidity = AggregateMeasurement(VAISALA_HUMIDITY_LIMITS)
        pressure = AggregateMeasurement(VAISALA_PRESSURE_LIMITS)

        measurement_start = None
        measurement_end = None
        queue_start = None
        queue_len = 0
        sufficient_data = True

        # deque is threadsafe, so we don't need an explicit lock
        for measurement in self._data:
            queue_len += 1
            date = measurement['date']

            # This is the first measurement with a valid date
            if queue_start is None:
                queue_start = date

            if measurement_end is None:
                measurement_end = date

            # Only include measurements within the desired window
            if date > max_first_date:
                if measurement_start is None:
                    measurement_start = date

                if date - measurement_end > VAISALA_TIME_GAP_MAX:
                    sufficient_data = False

                wind.add(measurement['wind_speed'])
                vaisala_temp.add(measurement['temperature'])
                vaisala_humidity.add(measurement['relative_humidity'])
                pressure.add(measurement['pressure'])

            measurement_end = date

        # Check that the first measurement was sufficiently old
        if queue_start is None or queue_start > max_first_date:
            sufficient_data = False

        # Check the time between the last measurement and now
        if measurement_end is None or measurement_end < min_last_date:
            sufficient_data = False

        # Can observe only if we have sufficient data and all of the parameters
        # are within their defined safe limits
        can_observe = sufficient_data and wind.results()[2] and pressure.results()[2] \
            and vaisala_temp.results()[2] and vaisala_humidity.results()[2]

        data = {
            'vaisala_sufficient_data': sufficient_data,
            'vaisala_queue_len': queue_len
        }

        if queue_len > 0:
            data.update({
                'wind': wind.results(),
                'pressure': pressure.results(),
                'vaisala_temp': vaisala_temp.results(),
                'vaisala_humidity': vaisala_humidity.results(),
                'vaisala_measurement_start': measurement_start.strftime('%Y-%m-%dT%H:%M:%SZ'),
                'vaisala_measurement_end': measurement_end.strftime('%Y-%m-%dT%H:%M:%SZ'),

                'vaisala_queue_start': queue_start.strftime('%Y-%m-%dT%H:%M:%SZ')
            })

        return (can_observe, data)

    def clear_history(self):
        """Clear the cached measurements"""
        self._data.clear()

class RoomAlertWatcher:
    """Tracks the state of the Room Alert"""

    def __init__(self):
        queue_len = CONDITION_TIMEOUT_DELAY.seconds * \
            1.1 / ROOMALERT_QUERY_DELAY
        self._data = deque(maxlen=math.ceil(queue_len))

        runloop = threading.Thread(target=self.__run_thread)
        runloop.daemon = True
        runloop.start()

    def __run_thread(self):
        """Run loop for monitoring the room alert"""
        while True:
            now = datetime.datetime.utcnow

            # Query the latest measurement
            # pylint: disable=broad-except
            try:
                data = query_roomalert_json(ROOMALERT_IP, ROOMALERT_PORT,
                                            ROOMALERT_QUERY_TIMEOUT)

                date = datetime.datetime.strptime(data['date'], "%m/%d/%y %H:%M:%S")
                processed = {
                    'date': date,
                    'external_temp': float(data['sensor'][0]['tc']),
                    'external_humidity': float(data['sensor'][0]['h']),
                    'internal_temp': float(data['sensor'][1]['tc']),
                    'internal_humidity': float(data['sensor'][1]['h']),

                    'roomalert_temp': float(data['internal_sen'][0]['tc']),
                    'roomalert_humidity': float(data['internal_sen'][0]['h']),
                    'truss_temp': float(data['sensor'][2]['tc']),
                    'hatch_closed': bool(data['s_sen'][0]['stat']),
                    'trap_closed': bool(data['s_sen'][1]['stat']),
                }

                if now() - date > ROOMALERT_TIME_GAP_MAX:
                    print('{} WARNING: recieved stale data from RoomAlert: {}' \
                        .format(now(), data['date']))

                self._data.append(processed)
            except Exception as exception:
                print('{} ERROR: failed to query from RoomAlert: {}' \
                      .format(now(), str(exception)))
            # pylint: enable=broad-except

            time.sleep(ROOMALERT_QUERY_DELAY)

    def status(self, max_first_date, min_last_date):
        """Queries the aggregate status of the RoomAlert monitor.
           Returns a tuple of observability and data"""

        external_temp = AggregateMeasurement(ROOMALERT_EXT_TEMPERATURE_LIMITS)
        external_humidity = AggregateMeasurement(ROOMALERT_EXT_HUMIDITY_LIMITS)
        internal_temp = AggregateMeasurement(ROOMALERT_INT_TEMPERATURE_LIMITS)
        internal_humidity = AggregateMeasurement(ROOMALERT_INT_HUMIDITY_LIMITS)

        # These values are tracked, but not considered for observability
        roomalert_temp = AggregateMeasurement()
        roomalert_humidity = AggregateMeasurement()
        truss_temp = AggregateMeasurement()
        hatch_closed = set()
        trap_closed = set()

        measurement_start = None
        measurement_end = None
        queue_start = None
        queue_len = 0
        sufficient_data = True

        # deque is threadsafe, so we don't need an explicit lock
        for measurement in self._data:
            queue_len += 1
            date = measurement['date']

            # This is the first measurement with a valid date
            if queue_start is None:
                queue_start = date

            if measurement_end is None:
                measurement_end = date

            # Only include measurements within the desired window
            if date > max_first_date:
                if measurement_start is None:
                    measurement_start = date

                if date - measurement_end > ROOMALERT_TIME_GAP_MAX:
                    sufficient_data = False

                external_temp.add(measurement['external_temp'])
                external_humidity.add(measurement['external_humidity'])
                internal_temp.add(measurement['internal_temp'])
                internal_humidity.add(measurement['internal_humidity'])

                roomalert_temp.add(measurement['roomalert_temp'])
                roomalert_humidity.add(measurement['roomalert_humidity'])
                truss_temp.add(measurement['truss_temp'])
                hatch_closed.add(measurement['hatch_closed'])
                trap_closed.add(measurement['trap_closed'])

            measurement_end = date

        # Check that the first measurement was sufficiently old
        if queue_start is None or queue_start > max_first_date:
            sufficient_data = False

        # Check the time between the last measurement and now
        if measurement_end is None or measurement_end < min_last_date:
            sufficient_data = False

        # Can observe only if we have sufficient data and all of the parameters
        # are within their defined safe limits
        can_observe = sufficient_data and external_temp.results()[2] and \
            external_humidity.results()[2] and internal_temp.results()[2] and \
            internal_humidity.results()[2]

        data = {
            'roomalert_sufficient_data': sufficient_data,
            'roomalert_queue_len': queue_len
        }

        if queue_len > 0:
            data.update({
                'external_temp': external_temp.results(),
                'external_humidity': external_humidity.results(),
                'internal_temp': internal_temp.results(),
                'internal_humidity': internal_humidity.results(),
                'roomalert_temp': roomalert_temp.results(),
                'roomalert_humidity': roomalert_humidity.results(),
                'truss_temp': truss_temp.results(),
                'hatch_closed': hatch_closed,
                'trap_closed': trap_closed,
                'roomalert_measurement_start': measurement_start.strftime('%Y-%m-%dT%H:%M:%SZ'),
                'roomalert_measurement_end': measurement_end.strftime('%Y-%m-%dT%H:%M:%SZ'),

                'roomalert_queue_start': queue_start.strftime('%Y-%m-%dT%H:%M:%SZ')
            })

        return (can_observe, data)

    def clear_history(self):
        """Clear the cached measurements"""
        self._data.clear()

class EnvironmentDaemon:
    """Daemon class for communicating with the lower level hardware daemons"""

    def __init__(self):
        self._lock = threading.Lock()
        self._running = True
        self._vaisala = VaisalaWatcher()
        self._roomalert = RoomAlertWatcher()


    def status(self):
        """Returns the aggregated status of the monitored daemons.
           Each measurement is a tuple of min value, max value, measurement valid
        """
        # The youngest date that the first measurement can take while remaining valid
        max_first_date = datetime.datetime.utcnow() - CONDITION_TIMEOUT_DELAY

        # The oldest date that the last measurement can take while remaining valid
        min_last_date = datetime.datetime.utcnow() - VAISALA_TIME_GAP_MAX

        vaisala_observe, vaisala_data = self._vaisala.status(max_first_date, min_last_date)
        roomalert_observe, roomalert_data = self._roomalert.status(max_first_date, min_last_date)

        ret = {'can_observe': vaisala_observe and roomalert_observe}
        ret.update(vaisala_data)
        ret.update(roomalert_data)
        return ret

    def running(self):
        """Returns false if the daemon should be terminated"""
        return self._running

    def stop(self):
        """Stop the daemon thread"""
        self._running = False

    def clear_history(self):
        """Clear the cached measurements"""
        print('{} MESSAGE: clearing cached history' \
            .format(datetime.datetime.utcnow()))
        self._vaisala.clear_history()
        self._roomalert.clear_history()

def spawn_daemon():
    """Spawns the daemon and registers it with Pyro"""
    Pyro4.config.COMMTIMEOUT = PYRO_COMM_TIMEOUT
    Pyro4.config.DETAILED_TRACEBACK = True
    pyro = Pyro4.Daemon(host=PYRO_HOST, port=PYRO_PORT)

    environment = EnvironmentDaemon()
    uri = pyro.register(environment, objectId='environment_daemon')

    print('{} MESSAGE: Starting environment daemon with Pyro ID: {}' \
        .format(datetime.datetime.utcnow(), uri))
    pyro.requestLoop(loopCondition=environment.running)
    print('{} MESSAGE: Stopping environment daemon with Pyro ID: {}' \
        .format(datetime.datetime.utcnow(), uri))

if __name__ == '__main__':
    spawn_daemon()
