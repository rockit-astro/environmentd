#!/usr/bin/env python3
#
# This file is part of environmentd.
#
# environmentd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# environmentd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with environmentd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for communicating with environmentd"""

import datetime
import os
import sys
import Pyro4

DAEMON_URI = 'PYRO:environment_daemon@localhost:9002'
FMT_GREEN = u'\033[92m'
FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

def print_status():
    """Prints the latest status data in human-readable form"""
    status = Pyro4.Proxy(DAEMON_URI).status()

    if status is None:
        print('No data available')
    else:
        print('It is {}{}{} to observe'.format(
            FMT_GREEN + FMT_BOLD if status['can_observe'] else FMT_RED + FMT_BOLD,
            'SAFE' if status['can_observe'] else 'NOT SAFE', FMT_CLEAR))
        print()

        if status['vaisala_queue_len'] > 0:
            vaisala_start = datetime.datetime.strptime(
                status['vaisala_measurement_start'], '%Y-%m-%dT%H:%M:%SZ')
            vaisala_end = datetime.datetime.strptime(
                status['vaisala_measurement_end'], '%Y-%m-%dT%H:%M:%SZ')

            vaisala_data = (vaisala_start.strftime('%H:%M:%S'),
                            vaisala_end.strftime('%H:%M:%S'),
                            status['vaisala_sufficient_data'])
            print(u'Vaisala data from ' + format_range(vaisala_data) + ':')
            print(u'             Wind: ' + format_range(status['wind']) + ' km/h')
            print(u'         Pressure: ' + format_range(status['pressure']) + ' hPa')
            print(u'   N2 Plant Temp.: ' + format_range(status['vaisala_temp']) + ' \u2103')
            print(u'    N2 Plant Hum.: ' + format_range(status['vaisala_humidity']) + ' %RH')
            print()
        else:
            print(FMT_RED + FMT_BOLD + 'No Vaisala data available' + FMT_CLEAR)

        if status['roomalert_queue_len'] > 0:
            roomalert_start = datetime.datetime.strptime(
                status['roomalert_measurement_start'], '%Y-%m-%dT%H:%M:%SZ')
            roomalert_end = datetime.datetime.strptime(
                status['roomalert_measurement_end'], '%Y-%m-%dT%H:%M:%SZ')

            roomalert_data = (roomalert_start.strftime('%H:%M:%S'),
                              roomalert_end.strftime('%H:%M:%S'),
                              status['roomalert_sufficient_data'])
            print(u'RoomAlert data from ' + format_range(roomalert_data) + ':')
            print(u'    Outside Temp.: ' + format_range(status['external_temp']) + ' \u2103')
            print(u'     Outside Hum.: ' + format_range(status['external_humidity']))
            print(u'   Internal Temp.: ' + format_range(status['internal_temp']) + ' \u2103')
            print(u'    Internal Hum.: ' + format_range(status['internal_humidity']) + ' %RH')
            print(u'      Truss Temp.: ' + format_range(status['truss_temp'], color=False)\
                + ' \u2103')
            print(u'     Server Temp.: ' + format_range(status['roomalert_temp'], color=False)\
                + ' \u2103')
            print(u'      Server Hum.: ' + format_range(status['roomalert_humidity'], color=False)\
                + ' %RH')
            print(u'       Side Hatch: ' + format_open_closed(status['hatch_closed']))
            print(u'        Trap Door: ' + format_open_closed(status['trap_closed']))
        else:
            print(FMT_RED + FMT_BOLD + 'No Room Alert data available' + FMT_CLEAR)
        print()

        if status['superwasp_queue_len'] > 0:
            superwasp_start = datetime.datetime.strptime(
                status['superwasp_measurement_start'], '%Y-%m-%dT%H:%M:%SZ')
            superwasp_end = datetime.datetime.strptime(
                status['superwasp_measurement_end'], '%Y-%m-%dT%H:%M:%SZ')

            superwasp_data = (superwasp_start.strftime('%H:%M:%S'),
                              superwasp_end.strftime('%H:%M:%S'),
                              status['superwasp_sufficient_data'])
            print(u'SuperWASP data from ' + format_range(superwasp_data) + ':')
            print(u'     Outside Hum.: ' + format_range(status['superwasp_ext_humidity'])\
                + ' %RH')
            print(u'        Sky Temp.: ' + format_range(status['superwasp_sky_temp']) + '\u2103')
            print(u'  Temp. > Dew Pt.: ' + format_range(status['superwasp_dew_point_delta'], '.2f')\
                + '\u2103')
        else:
            print(FMT_RED + FMT_BOLD + 'No SuperWASP data available' + FMT_CLEAR)
        print()
    return status is None or not status['can_observe']

def format_range(data, fmt=None, color=True):
    """Builds a formatted string with a value range"""
    fmt = '' if fmt is None else ':' + fmt
    fmt = '{2}{3}{0' + fmt + '}{4}{2} \u2014 {2}{3}{1' + fmt + '}{4}'
    color_fmt = '' if not color else FMT_GREEN if data[2] else FMT_RED
    return fmt.format(data[0], data[1], color_fmt, FMT_BOLD, FMT_CLEAR)

def format_open_closed(data):
    """Builds a formatted string with OPEN and/or CLOSED"""
    string = ""
    if False in data:
        string += "OPEN"
    if True in data:
        if len(string) > 0:
            string += ", "
        string += "CLOSED"
    return FMT_BOLD + string + FMT_CLEAR

def print_raw():
    """Prints the latest status data in machine-readable form"""
    status = Pyro4.Proxy(DAEMON_URI).status()
    return status is None or not status['can_observe']

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} command'.format(name))
    print()
    print('    {} status'.format(name))
    print()
    print('  Print a human-readable summary of the operations status and exit')
    print()
    print('    {} raw'.format(name))
    print()
    print('  Print a machine-readable summary of the operations status and exit')
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == 'status':
            sys.exit(print_status())
        elif sys.argv[1] == 'raw':
            sys.exit(print_raw())
    else:
        sys.exit(print_usage(os.path.basename(sys.argv[0])))
