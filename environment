#!/usr/bin/env python3.6
#
# This file is part of environmentd.
#
# environmentd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# environmentd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with environmentd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for communicating with environmentd"""

# pylint: disable=too-many-statements
# pylint: disable=too-many-branches
# pylint: disable=too-many-locals
# pylint: disable=too-few-public-methods
# pylint: disable=bare-except

import datetime
import json
import os
import sys
import Pyro4
from warwick.observatory.common import daemons

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_YELLOW = u'\033[93m'
FMT_GREEN = u'\033[92m'
FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

SET_LABELS = {
    'BoolPowerOnOff': {
        False: FMT_BOLD + 'POWER OFF' + FMT_CLEAR,
        True: FMT_BOLD + 'POWER ON' + FMT_CLEAR
    },
    'BoolClosedOpen': {
        False: FMT_BOLD + 'OPEN' + FMT_CLEAR,
        True: FMT_BOLD + 'CLOSED' + FMT_CLEAR
    },
    'BoolSafeTripped': {
        False: FMT_BOLD + FMT_RED + 'TRIPPED' + FMT_CLEAR,
        True: FMT_BOLD + FMT_GREEN + 'SAFE' + FMT_CLEAR
    },
    'BoolHealthyUnhealthy': {
        False: FMT_BOLD + FMT_RED + 'UNHEALTY' + FMT_CLEAR,
        True: FMT_BOLD + FMT_GREEN + 'HEALTHY' + FMT_CLEAR
    },
    'UPSStatus': {
        1: FMT_BOLD + FMT_RED + 'UNKNOWN' + FMT_CLEAR,
        2: FMT_BOLD + FMT_GREEN + 'ONLINE' + FMT_CLEAR,
        3: FMT_BOLD + FMT_YELLOW + 'ON BATTERY' + FMT_CLEAR,
        4: FMT_BOLD + FMT_RED + 'SMART BOOST' + FMT_CLEAR,
        5: FMT_BOLD + FMT_RED + 'TIMED SLEEPING' + FMT_CLEAR,
        6: FMT_BOLD + FMT_RED + 'SOFTWARE BYPASS' + FMT_CLEAR,
        7: FMT_BOLD + FMT_RED + 'OFF' + FMT_CLEAR,
        8: FMT_BOLD + FMT_RED + 'REBOOTING' + FMT_CLEAR,
        9: FMT_BOLD + FMT_RED + 'SWITCHED BYPASS' + FMT_CLEAR,
        10: FMT_BOLD + FMT_RED + 'HARDWARE FAILURE BYPASS' + FMT_CLEAR,
        11: FMT_BOLD + FMT_RED + 'SLEEPING UNTIL POWER RETURNS' + FMT_CLEAR,
        12: FMT_BOLD + FMT_RED + 'ON SMART TRIM' + FMT_CLEAR
    }
}


def print_status():
    """Prints the latest environment data in human-readable form"""
    try:
        with daemons.observatory_environment.connect() as environment:
            data = environment.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the environment daemon')
        return 1

    if data is None:
        print('No data available')
    else:
        # Find the longest label to set the parameter indent
        max_label_length = 0
        for watcher_data in data.values():
            for parameter_data in watcher_data['parameters'].values():
                max_label_length = max(max_label_length, len(parameter_data['label']))

        for watcher_data in data.values():
            print(watcher_data['label'] + ' data from ' + format_date(watcher_data['parameters']))
            for parameter_data in watcher_data['parameters'].values():
                label = parameter_data['label']
                label_padding = max_label_length - len(label)
                suffix = ''
                if 'unit' in parameter_data:
                    suffix = ' ' + parameter_data['unit']

                output = ' ' * label_padding + label + ': '
                if 'values' in parameter_data:
                    output += format_set(parameter_data)
                else:
                    output += format_measurement(parameter_data, suffix)

                print(output)
            print()

    return 0


def print_json():
    """Prints the latest environment data in machine-readable form"""
    try:
        with daemons.observatory_environment.connect() as environment:
            status = environment.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the environment daemon')
        return 1

    print(json.dumps(status))

    return 0


def format_date(data):
    """Builds a formatted date string for the named data group"""
    start = None
    end = None
    current = False
    for param in data.values():
        try:
            param_start = datetime.datetime.strptime(param['date_start'],
                                                     '%Y-%m-%dT%H:%M:%SZ')
            param_end = datetime.datetime.strptime(param['date_end'], '%Y-%m-%dT%H:%M:%SZ')
            start = param_start if not start else min(start, param_start)
            end = param_end if not end else min(end, param_end)
            current = current or param['current']
        except:
            pass

    ret = FMT_BOLD
    if start and end:
        ret += start.strftime('%H:%M:%S') + ' \u2014 '
        if not current:
            ret += FMT_RED
        ret += end.strftime('%H:%M:%S') + FMT_CLEAR
        ret += FMT_BOLD + ':' + FMT_CLEAR
    else:
        ret += FMT_RED + 'NO DATA' + FMT_CLEAR
    return ret


def format_value(value, data, fmt='.1f'):
    """Builds a formatted string colored based on the specified limits"""
    color = FMT_BOLD
    limits = data.get('limits', None)
    warn_limits = data.get('warn_limits', None)

    if limits or warn_limits:
        if limits and (value < limits[0] or value > limits[1]):
            color += FMT_RED
        elif warn_limits and (value < warn_limits[0] or value > warn_limits[1]):
            color += FMT_YELLOW
        else:
            color += FMT_GREEN

    display = data.get('display', None)
    if display == 'DiskBytes':
        value = str(round(value / 2**30, 1))
        fmt = ''
    elif display in SET_LABELS:
        value = SET_LABELS[display].get(value, value)
        fmt = ''

    return color + ('{0' + fmt + '}').format(value) + FMT_CLEAR


def format_measurement(data, suffix='', fmt='.1f'):
    """Builds a formatted string with a value range"""
    if fmt != '':
        fmt = ':' + fmt

    ret = ''
    if 'min' in data:
        ret += format_value(data['min'], data, fmt) + ' \u2264 '

    if data['current']:
        ret += format_value(data['latest'], data, fmt)
    else:
        ret += FMT_RED + FMT_BOLD + 'NO DATA' + FMT_CLEAR

    if 'max' in data:
        ret += ' \u2264 ' + format_value(data['max'], data, fmt)

    if data['current'] or 'max' in data:
        ret += suffix

    if data['unsafe']:
        ret += FMT_RED + FMT_BOLD + ' (UNSAFE)' + FMT_CLEAR
    elif data['warning']:
        ret += FMT_RED + FMT_YELLOW + ' (WARNING)' + FMT_CLEAR

    return ret


def format_set(data):
    """Builds a formatted string with specified values"""
    labels = []
    if 'display' in data:
        labels = SET_LABELS.get(data['display'], [])

    if data['current']:
        ret = labels.get(data['latest'], data['latest'])
    else:
        ret = FMT_RED + FMT_BOLD + 'NO DATA' + FMT_CLEAR

    if 'values' in data and (len(data['values']) > 1 or not data['current']):
        if ret:
            ret += ' '
        display_values = [labels.get(v, v) for v in data['values']]
        ret += '[' + ', '.join(display_values) + ']'

    if data['unsafe']:
        ret += FMT_RED + FMT_BOLD + ' (UNSAFE)' + FMT_CLEAR
    elif data['warning']:
        ret += FMT_RED + FMT_YELLOW + ' (WARNING)' + FMT_CLEAR

    return ret


def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the aggregated environment status')
    print('   json        print a machine-readable summary of the aggregated environment status')
    print()

    return 1


if __name__ == '__main__':
    if len(sys.argv) < 2:
        sys.exit(print_usage(SCRIPT_NAME))

    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))
