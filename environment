#!/usr/bin/env python3
#
# This file is part of environmentd.
#
# environmentd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# environmentd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with environmentd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for communicating with environmentd"""

# pylint: disable=too-many-statements
# pylint: disable=too-many-branches
# pylint: disable=too-many-locals
# pylint: disable=too-few-public-methods

import datetime
import json
import os
import sys
import Pyro4
import warwick.observatory as observatory

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

FMT_YELLOW = u'\033[93m'
FMT_GREEN = u'\033[92m'
FMT_RED = u'\033[91m'
FMT_BOLD = u'\033[1m'
FMT_CLEAR = u'\033[0m'

UPS_STATUS = {
    1: FMT_BOLD + FMT_RED + 'UNKNOWN' + FMT_CLEAR,
    2: FMT_BOLD + FMT_GREEN + 'ONLINE' + FMT_CLEAR,
    3: FMT_BOLD + FMT_YELLOW + 'ON BATTERY' + FMT_CLEAR,
    4: FMT_BOLD + FMT_RED + 'SMART BOOST' + FMT_CLEAR,
    5: FMT_BOLD + FMT_RED + 'TIMED SLEEPING' + FMT_CLEAR,
    6: FMT_BOLD + FMT_RED + 'SOFTWARE BYPASS' + FMT_CLEAR,
    7: FMT_BOLD + FMT_RED + 'OFF' + FMT_CLEAR,
    8: FMT_BOLD + FMT_RED + 'REBOOTING' + FMT_CLEAR,
    9: FMT_BOLD + FMT_RED + 'SWITCHED BYPASS' + FMT_CLEAR,
    10: FMT_BOLD + FMT_RED + 'HARDWARE FAILURE BYPASS' + FMT_CLEAR,
    11: FMT_BOLD + FMT_RED + 'SLEEPING UNTIL POWER RETURNS' + FMT_CLEAR,
    12: FMT_BOLD + FMT_RED + 'ON SMART TRIM' + FMT_CLEAR,
}

class DisableParameterStatus:
    """Return codes for ResetParameterStatus"""
    Success, InvalidWatcher, InvalidParameter = range(3)

class ParameterStatus:
    """Status of a measurement parameter"""
    Unsafe, Safe, Disabled = range(3)

STATUS_COLORS = {
    ParameterStatus.Unsafe: FMT_BOLD + FMT_RED,
    ParameterStatus.Safe: FMT_BOLD + FMT_GREEN,
    ParameterStatus.Disabled: FMT_BOLD
}

def print_status():
    """Prints the latest environment data in human-readable form"""
    status = None

    try:
        with observatory.daemons.onemetre_environment.connect() as environment:
            status = environment.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the environment daemon')
        return 1

    if status is None:
        print('No data available')
    else:
        print('It is {}{}{} to observe'.format(
            FMT_GREEN + FMT_BOLD if status['can_observe'] else FMT_RED + FMT_BOLD,
            'SAFE' if status['can_observe'] else 'NOT SAFE', FMT_CLEAR))
        print()

        if status['vaisala_queue_len'] > 0:
            print('Vaisala data from ' + format_date(status, 'vaisala'))

            wind_valid = False not in status['vaisala_wind_speed_valid']
            print('             Wind: ' + format_range(status['vaisala_wind_speed'], ' km/h',
                                                       valid=wind_valid))
            print('      Median Wind: ' + format_single(status['vaisala_median_wind_speed'],
                                                        ' km/h'))

            pressure_valid = False not in status['vaisala_pressure_valid']
            print('         Pressure: ' + format_range(status['vaisala_pressure'], ' hPa',
                                                       valid=pressure_valid))

            temp_valid = False not in status['vaisala_temperature_valid']
            print('    Outside Temp.: ' + format_range(status['vaisala_temperature'], '\u00B0C',
                                                       valid=temp_valid))

            humidity_valid = False not in status['vaisala_relative_humidity_valid']
            print('     Outside Hum.: ' + format_range(status['vaisala_relative_humidity'],
                                                       ' %RH', valid=humidity_valid))

            accumulated_rain_valid = False not in status['vaisala_accumulated_rain_valid']
            print('Accumulated Rain.: ' + format_range(status['vaisala_accumulated_rain'], ' mm',
                                                       fmt='.2f', valid=accumulated_rain_valid))
        else:
            print(FMT_RED + FMT_BOLD + 'No Vaisala data available' + FMT_CLEAR)
        print()

        if status['roomalert_queue_len'] > 0:
            print('RoomAlert data from ' + format_date(status, 'roomalert'))
            print('   Internal Temp.: ' + format_range(status['roomalert_internal_temp'],
                                                       '\u00B0C'))
            print('    Internal Hum.: ' + format_range(status['roomalert_internal_humidity'],
                                                       ' %RH'))
            print('      Truss Temp.: ' + format_range(status['roomalert_truss_temp'],
                                                       '\u00B0C', color=False))
            print('     Server Temp.: ' + format_range(status['roomalert_roomalert_temp'],
                                                       '\u00B0C', color=False))
            print('      Server Hum.: ' + format_range(status['roomalert_roomalert_humidity'],
                                                       ' %RH', color=False))
            print('       Side Hatch: ' + format_open_closed(status['roomalert_hatch_closed']))
            print('        Trap Door: ' + format_open_closed(status['roomalert_trap_closed']))
        else:
            print(FMT_RED + FMT_BOLD + 'No Room Alert data available' + FMT_CLEAR)
        print()

        if status['superwasp_queue_len'] > 0:
            print('SuperWASP data from ' + format_date(status, 'superwasp', color=False))
            print('     Outside Hum.: ' + format_range(status['superwasp_ext_humidity'], ' %RH',
                                                       color=False))
            print('        Sky Temp.: ' + format_range(status['superwasp_sky_temp'], '\u00B0C',
                                                       color=False))
            print('  Temp. > Dew Pt.: ' + format_range(status['superwasp_dew_point_delta'],
                                                       '\u00B0C', fmt='.2f', color=False))
        else:
            print(FMT_YELLOW + FMT_BOLD + 'No SuperWASP data available' + FMT_CLEAR)
        print()

        if status['tng_queue_len'] > 0:
            print('TNG data from ' + format_date(status, 'tng', color=False))
            print('       Dust Conc.: ' + format_range(status['tng_dust'], ' ug/m\u00B3',
                                                       color=False))
        else:
            print(FMT_YELLOW + FMT_BOLD + 'No TNG data available' + FMT_CLEAR)
        print()

        if status['power_queue_len'] > 0:
            print('UPS data from ' + format_date(status, 'power'))
            print('         Main UPS: ' + format_ups(status, 'power_main_ups'))
            print('         Dome UPS: ' + format_ups(status, 'power_dome_ups'))
        else:
            print(FMT_RED + FMT_BOLD + 'No UPS data available' + FMT_CLEAR)
        print()

        if status['netping_queue_len'] > 0:
            print('Network ping data from ' + format_date(status, 'netping'))
            print('           Google: ' + format_range(status['netping_google'], ' ms'))
            print('         NGTSHead: ' + format_range(status['netping_ngtshead'], ' ms'))
        else:
            print(FMT_RED + FMT_BOLD + 'No ping data available' + FMT_CLEAR)
        print()

        if status['diskspace_queue_len'] > 0:
            # Convert from bytes to GiB
            data_bytes = status['diskspace_data_fs_available_bytes']
            data_gb = (round(data_bytes[0] / 2**30, 1), data_bytes[1])
            suffix = ' GiB ({}) available'.format(
                format_single(status['diskspace_data_fs_percent_available'], '%', fmt=''))
            print('Disk space from ' + format_date(status, 'diskspace'))
            print('   Data Partition: ' + format_single(data_gb, suffix))
        else:
            print(FMT_RED + FMT_BOLD + 'No disk space data available' + FMT_CLEAR)
        print()
    return status is None or not status['can_observe']

def print_json():
    """Prints the latest environment data in machine-readable form"""
    status = None
    try:
        with observatory.daemons.onemetre_environment.connect() as environment:
            status = environment.status()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the environment daemon')
        return 1

    print(json.dumps(status))

    return 0

def format_date(data, group, color=True):
    """Builds a formatted date string for the named data group"""
    start = datetime.datetime.strptime(data[group + '_measurement_start'], '%Y-%m-%dT%H:%M:%SZ')
    end = datetime.datetime.strptime(data[group + '_measurement_end'], '%Y-%m-%dT%H:%M:%SZ')
    data = (start.strftime('%H:%M:%S'), end.strftime('%H:%M:%S'), data[group + '_data_status'])
    return format_range(data, ':', fmt='', color=color)

def format_range(data, suffix='', fmt='.1f', color=True, valid=True):
    """Builds a formatted string with a value range"""
    if fmt != '':
        fmt = ':' + fmt

    color_fmt = '' if not color else STATUS_COLORS[data[2]]
    min_value = color_fmt + ('{0' + fmt +'}').format(data[0]) + FMT_CLEAR
    max_value = color_fmt + ('{0' + fmt +'}').format(data[1]) + FMT_CLEAR

    # Show a single value if min and max are the same
    if data[0] == data[1]:
        ret = min_value
    else:
        ret = min_value + FMT_BOLD + ' \u2014 ' + FMT_CLEAR + max_value

    ret += suffix

    if not valid:
        ret += FMT_RED + FMT_BOLD + ' (INVALID)' + FMT_CLEAR

    if data[2] == ParameterStatus.Disabled:
        ret += FMT_YELLOW + FMT_BOLD + ' (DISABLED)' + FMT_CLEAR

    return ret

def format_single(data, suffix='', fmt='.1f', color=True):
    """Builds a formatted string with a value"""
    return format_range((data[0], data[0], data[1]), suffix=suffix, fmt=fmt, color=color)

def format_open_closed(data):
    """Builds a formatted string with OPEN and/or CLOSED"""
    string = ""
    if False in data:
        string += "OPEN"
    if True in data:
        if len(string) > 0:
            string += ", "
        string += "CLOSED"
    return FMT_BOLD + string + FMT_CLEAR

def format_ups(data, prefix):
    """Builds a formatted string for a UPS status"""
    battery = format_range(data[prefix + '_battery_remaining'], '%', fmt='')
    ret = ''
    for status in data[prefix + '_status']:
        if len(ret) > 0:
            ret += ', '
        ret += UPS_STATUS[status]
    ret += ' (' + battery + ' battery)'

    if False in data[prefix + '_battery_healthy']:
        ret += FMT_BOLD + FMT_YELLOW + ' REPLACE BATTERY' + FMT_CLEAR

    return ret

def override_parameter_limits(disable, args):
    """Disable or re-enable a watcher parameter"""
    arg_count = len(args)
    if arg_count == 1 or arg_count == 2:
        watcher = args[0]
        parameter = args[1] if arg_count == 2 else None
        try:
            with observatory.daemons.onemetre_environment.connect() as environment:
                ret = environment.override_parameter_limits(watcher, parameter, disable)
                if ret == DisableParameterStatus.Success:
                    return 0

                if ret == DisableParameterStatus.InvalidWatcher:
                    print('error: invalid id ' + watcher)
                elif ret == DisableParameterStatus.InvalidParameter:
                    print('error: invalid parameter ' + parameter)
                else:
                    print('error: unknown error code ' + str(ret))
                return 1
        except Pyro4.errors.CommunicationError:
            print('error: unable to communicate with the environment daemon')
            return 1

    command = 'override' if disable else 'restore'
    print('usage: {} {} <watcher> [<parameter>]'.format(SCRIPT_NAME, command))
    return 1

def list_watchers():
    """Print a list of watcher names (for use by bash completions)"""
    try:
        with observatory.daemons.onemetre_environment.connect() as environment:
            names = environment.list_watchers()
            print(' '.join(names))
            return 0
    except Pyro4.errors.CommunicationError:
        print('')
        return 1

def list_limited_parameters(args):
    """Print a list of watcher parameter names (for use by bash completions)"""
    if len(args) == 0:
        print('')
        return 1

    try:
        with observatory.daemons.onemetre_environment.connect() as environment:
            names = environment.list_limited_parameters(args[0])
            print(' '.join(names))
            return 0
    except Pyro4.errors.CommunicationError:
        print('')
        return 1

def print_usage(name):
    """Prints the utility help"""
    print('Usage: {} <command>'.format(name))
    print()
    print('   status      print a human-readable summary of the aggregated environment status')
    print('   json        print a machine-readable summary of the aggregated environment status')
    print('   override    temporarily disable triggering on an environment parameter')
    print('   restore     re-enable triggering on an environment parameter')
    # list_watchers and list_limited_parameters are only useful for bash completion
    # so they are not listed here
    print()

    return 1

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.exit(print_usage(SCRIPT_NAME))

    if sys.argv[1] == 'status':
        sys.exit(print_status())
    elif sys.argv[1] == 'json':
        sys.exit(print_json())
    elif sys.argv[1] == 'override':
        sys.exit(override_parameter_limits(True, sys.argv[2:]))
    elif sys.argv[1] == 'restore':
        sys.exit(override_parameter_limits(False, sys.argv[2:]))
    elif sys.argv[1] == 'list-watchers':
        sys.exit(list_watchers())
    elif sys.argv[1] == 'list-limited-parameters':
        sys.exit(list_limited_parameters(sys.argv[2:]))

    # Command not found
    sys.exit(print_usage(SCRIPT_NAME))

